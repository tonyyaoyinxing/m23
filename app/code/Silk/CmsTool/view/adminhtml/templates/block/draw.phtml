
<div id="app">
    <el-radio-group v-model="isCollapse" style="margin-bottom: 20px;">
      <el-radio-button :label="false">展开</el-radio-button>
      <el-radio-button :label="true">收起</el-radio-button>
    </el-radio-group>
    <el-menu default-active="1-4-1" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose" :collapse="isCollapse">
      <el-submenu index="1">
        <template slot="title">
          <i class="el-icon-location"></i>
          <span slot="title">导航一</span>
        </template>
        <el-menu-item-group>
          <span slot="title">分组一</span>
          <el-menu-item index="1-1">选项1</el-menu-item>
          <el-menu-item index="1-2">选项2</el-menu-item>
        </el-menu-item-group>
        <el-menu-item-group title="分组2">
          <el-menu-item index="1-3">选项3</el-menu-item>
        </el-menu-item-group>
        <el-submenu index="1-4">
          <span slot="title">选项4</span>
          <el-menu-item index="1-4-1">选项1</el-menu-item>
        </el-submenu>
      </el-submenu>
      <el-menu-item index="2">
        <i class="el-icon-menu"></i>
        <span slot="title">导航二</span>
      </el-menu-item>
      <el-menu-item index="3" disabled>
        <i class="el-icon-document"></i>
        <span slot="title">导航三</span>
      </el-menu-item>
      <el-menu-item index="4">
        <i class="el-icon-setting"></i>
        <span slot="title">导航四</span>
      </el-menu-item>
      <div class="draw-main">
        <div class="list" id="list">
            <VueDragResize v-for="(rect, index) in elements"
                            :key="index"
                            :w="rect.width"
                            :h="rect.height"
                            :x="rect.left"
                            :y="rect.top"
                            :parentW="listWidth"
                            :parentH="listHeight"
                            :axis="rect.axis"
                            :isActive="rect.active"
                            :minw="rect.minw"
                            :minh="rect.minh"
                            :isDraggable="rect.draggable"
                            :isResizable="rect.resizable"
                            :parentLimitation="rect.parentLim"
                            :snapToGrid="rect.snapToGrid"
                            :aspectRatio="rect.aspectRatio"
                            :z="rect.zIndex"
                            :contentClass="rect.class"
                            v-on:activated="activateEv(index)"
                            v-on:deactivated="deactivateEv(index)"
                            v-on:dragging="changePosition($event, index)"
                            v-on:resizing="changeSize($event, index)"
            >
                <div class="filler" :style="{backgroundColor:rect.color}"></div>
            </VueDragResize>
        </div>
      </div>
    </el-menu>
</div>
<script>
  
new Vue({
  el: '#app',
  data: function() {
    return {
       visible: false,
       isCollapse: true,
       listWidth: 0,
       listHeight: 0,
       elements:<?= json_encode($block->renderElements()) ?>,
    }
  },
  components: {
            VueDragResize,
        },
  mounted() {
      let listEl = document.getElementById('list');
      this.listWidth = listEl.clientWidth;
      this.listHeight = listEl.clientHeight;
      window.addEventListener('resize', ()=>{
          this.listWidth = listEl.clientWidth;
          this.listHeight = listEl.clientHeight;
      })
  },

  computed: {
      rects() {
          //return this.$store.state.rect.rects
      }
  },

  methods: {
      activateEv(index) {
          //this.$store.dispatch('rect/setActive', {id: index});
      },

      deactivateEv(index) {
          //this.$store.dispatch('rect/unsetActive', {id: index});
      },

      changePosition(newRect, index) {

          // this.$store.dispatch('rect/setTop', {id: index, top: newRect.top});
          // this.$store.dispatch('rect/setLeft', {id: index, left: newRect.left});
          // this.$store.dispatch('rect/setWidth', {id: index, width: newRect.width});
          // this.$store.dispatch('rect/setHeight', {id: index, height: newRect.height});
      },

      changeSize(newRect, index) {
          // this.$store.dispatch('rect/setTop', {id: index, top: newRect.top});
          // this.$store.dispatch('rect/setLeft', {id: index, left: newRect.left});
          // this.$store.dispatch('rect/setWidth', {id: index, width: newRect.width});
          // this.$store.dispatch('rect/setHeight', {id: index, height: newRect.height});
      },
      handleOpen(key, keyPath) {
        console.log(key, keyPath);
      },
      handleClose(key, keyPath) {
        console.log(key, keyPath);
      }
  }
})
</script>