
<div id="app">
  <el-container style="height: 1000px; border: 1px solid #eee">
    <el-aside width="400px" style="background-color: rgb(238, 241, 246);text-align:center">
      <el-menu v-for="(menu, index) in menus">
        <template v-if="index === 0">
          <el-submenu index="{index}">
            <template slot="title"><i :class="setClass(menu.icon)"></i>{{menu.title}}</template>  
            <el-menu-item-group v-for="(cmenu, cindex) in menu.items">
              <el-menu-item index="{index}" @click="addElement(index,cindex)">{{cmenu.title}}</el-menu-item>
            </el-menu-item-group>
          </el-submenu>
        </template>
        <template v-else>
          <el-menu-item index="{index}" @click="addElement(index,'')">
            <i :class="setClass(menu.icon)"></i>
            <span slot="title">{{menu.title}}</span>
          </el-menu-item>
        </template>         
      </el-menu>
      <el-menu>
        <el-menu-item index="20" @click="saveElement()">
          <i class="el-icon-folder-checked"></i>
          <span slot="title">保存</span>
        </el-menu-item>
      </el-menu>
    </el-aside>
    <el-container v-loading="loading">
      <el-main>
        <div class="draw-main" :style="{width:width+'px',height:height+'px'}">
          <div class="list" id="list" :isDraggable="true">
              <vue-drag-resize v-for="(rect, index) in elements"
                              :key="index" 
                              :w="rect.width"
                              :h="rect.height"
                              :x="rect.left"
                              :y="rect.top"
                              :parent-w="listWidth"
                              :parent-h="listHeight"
                              :axis="rect.axis"
                              :is-active="rect.active"
                              :minw="rect.minw"
                              :minh="rect.minh"
                              :is-draggable="rect.draggable"
                              :is-resizable="rect.resizable"
                              :parent-limitation="true"
                              :snap-to-grid="rect.snapToGrid"
                              :aspect-ratio="rect.aspectRatio"
                              :z="rect.zIndex"
                              :content-class="rect.class"
                              v-on:activated="activateEv(index)"
                              v-on:deactivated="deactivateEv(index)"
                              v-on:dragging="changePosition($event, index)"
                              v-on:resizing="changeSize($event, index)"
                              :type="rect.type"
                              :image-url="rect.imageUrl"
                              :headline="rect.headline"
                              :deadline="rect.deadline"
              >
                  <div class="filler" :style="{backgroundColor:rect.color}">
                    <el-button class="float-button-copy" type="primary" icon="el-icon-document-copy" size="mini" @click="toCopy(index)" round></el-button>
                    <el-button class="float-button-bottom" type="primary" icon="el-icon-bottom" size="mini" @click="toBottom(index)" round></el-button>
                    <el-button class="float-button-top" type="primary" icon="el-icon-top" size="mini" @click="toTop(index)" round></el-button>
                    <el-button class="float-button-edit" type="primary" icon="el-icon-edit" size="mini" @click="editElement(index)" round></el-button>
                    <el-button class="float-button-remove" type="primary" icon="el-icon-delete" @click="removeElement(index)" size="mini" round></el-button>
                    <template v-if="rect.type === '1'">
                      <img :src="rect.imageUrl" alt="" width="100%" height="100%">
                    </template>
                    <template v-else-if="rect.type === '2'">
                      <a><video :src="rect.videoUrl" alt="" width="100%" height="100%" controls="controls"></a>
                    </template>
                    <template v-else-if="rect.type === '3'">
                      <div class="{rect.class}" :style="{fontWeight:rect.fontWeight,fontStyle:rect.fontStyle,color:rect.fontColor,fontSize:rect.fontSize,textAlign:rect.fontPosition,lineHeight:rect.height+'px'}">{{rect.headline}}</div>
                    </template>
                    <template v-else-if="rect.type === '4'">
                      <flip-countdown :deadline="rect.deadline"></flip-countdown>
                    </template>
                    <template v-else-if="rect.type === '5'">
                      <template v-if="rect.redirectStyle === 'text'">
                        <template v-if="rect.redirectType === 'product'">
                          <c-link :rect="rect"></c-link>
                        </template>
                        <template v-else>
                          <c-link-text :rect="rect"></c-link-text>
                        </template>
                      </template>
                      <template v-else>
                        <template v-if="rect.redirectType === 'product'">
                          <c-button :rect="rect"></c-button>
                        </template>
                        <template v-else>
                          <c-button :rect="rect"></c-button>
                        </template>
                      </template>
                    </template>
                    <template v-else-if="rect.type === '6'">
                      <div :style="{backgroundColor:rect.backgroundColor}" style="width:100%;height:100%"></div>
                    </template>
                    <template v-else-if="rect.type === '7'">
                      <el-carousel :height="rect.height+'px'" :type="rect.carouselType?rect.carouselType:'default'" :interval="parseInt(rect.carouselInterval)*1000" :direction="rect.carouselDirection" :autoplay="rect.carouselAuto==='true'?true:false">
                        <el-carousel-item v-for="(item,key) in rect.carouselItem">             
                          <el-button class="carousel-button-add" type="el-button el-button--info is-circle" icon="el-icon-document-add" size="mini" @click="addCarousel(index,key)" round></el-button>             
                          <el-button class="carousel-button-edit" type="el-button el-button--info is-circle" icon="el-icon-edit" size="mini" @click="editCarousel(index,key)" round></el-button>
                          <el-button class="carousel-button-remove" type="el-button el-button--info is-circle" icon="el-icon-delete" @click="removeCarousel(index,key)" size="mini" round></el-button>
                          <a>
                          <div class = "carousel-headline">
                            <div :style="{fontWeight:item.fontWeight,fontStyle:item.fontStyle,color:item.fontColor,fontSize:item.fontSize,textAlign:item.fontPosition,lineHeight:item.height+'px'}">{{item.headline}}</div>
                            <div :style="{fontWeight:item.fontWeight,fontStyle:item.fontStyle,color:item.fontColor,fontSize:item.fontSize,textAlign:item.fontPosition,lineHeight:item.height+'px'}">{{item.subHeadline}}</div>
                          </div>
                          </a>
                          <img :src="item.imageBannerUrl" alt="" width="100%" height="100%">
                        </el-carousel-item>
                      </el-carousel>
                    </template>
                    <template v-else>
                      <p class="{rect.class}">{{rect.headline}}</p>
                    </template>
                  </div>
              </vue-drag-resize>
          </div>
        </div>
      </el-main>
    </el-container>
  </el-container>
  <div class="tab-container">
    <el-dialog :visible.sync="dialogFormVisible" @close="closeDialog">
      <el-form
        :model="cmsForm"
        ref="cmsForm"
        label-position="left"
        label-width="90px"
        style="width: 400px; margin-left:50px;"
      >
        <el-form-item label="宽度">
          <el-input v-model="cmsForm.width" />
        </el-form-item>
        <el-form-item label="高度">
          <el-input v-model="cmsForm.height" />
        </el-form-item>
        <template v-if="cmsForm.type === '1'">
          <el-upload
            action="<?= $block->getImageUploadUrl() ?>"
            :data="{'form_key':'<?php echo $block->getFormKey() ?>'}"
            list-type="picture-card"
            :auto-upload="true"
            :on-preview="handlePictureCardPreview"
            :on-success="uploadSuccess" 
            :on-remove="removeSuccess"
            :file-list="fileList"
            :before-upload="beforeUpload"   
            :class="{ hideUpload: !showUpload }"
            :limit="1" >
            <i class="el-icon-plus"></i>
          </el-upload>
          <el-dialog :visible.sync="dialogVisible">
            <img width="100%" :src="{dialogImageUrl}" alt="">
          </el-dialog>
        </template>
        <template v-else-if="cmsForm.type === '2'">
          <el-upload class="avatar-uploader el-upload--text" action='' :show-file-list="false" accept=".mp4,.flv,.mov,.mp3" :on-change="uploadVideoChange" :before-upload="uploadVideoBefore" :limit="1">
            <video v-if="cmsForm.videoUrl !='' && videoFlag == false" :src="cmsForm.videoUrl" controls="controls">您的浏览器不支持视频播放</video>
            <i v-else-if="cmsForm.videoUrl =='' && videoFlag == false" class="el-icon-plus avatar-uploader-icon"></i>
            <el-progress v-if="videoFlag == true" type="circle" :percentage="videoUploadPercent" style="margin-top:30px;"></el-progress>
          </el-upload>
          <P class="text">请保证视频格式正确，且不超过10M</P>
        </template>
        
        <template v-else-if="cmsForm.type === '3'">
          <el-form-item label="文本">
            <el-input v-model="cmsForm.headline" />
          </el-form-item>
          <el-form-item label="文本位置">
            <el-select
              v-model="cmsForm.fontPosition"
              class="filter-item"
              placeholder="选择文本位置"
            >
              <el-option
                v-for="item in fontPosition"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="字体大小">
            <el-select
              v-model="cmsForm.fontSize"
              class="filter-item"
              placeholder="选择字体大小"
            >
              <el-option
                v-for="item in fontSize"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="字体颜色">
            <el-color-picker
              v-model="cmsForm.fontColor"
              show-alpha
              :predefine="predefineColors">
            </el-color-picker>
          </el-form-item>
          <el-form-item label="加粗效果">
            <el-select
              v-model="cmsForm.fontWeight"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontWeight"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="斜体">
            <el-select
              v-model="cmsForm.fontStyle"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontStyle"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
        </template>
        <template v-else-if="cmsForm.type === '4'">
          <el-form-item label="倒计时">
            <el-date-picker
              v-model="cmsForm.deadline"
              type="datetime"
              value-format="yyyy-MM-dd HH:mm:ss"
              placeholder="选择日期时间">
            </el-date-picker>
          </el-form-item>
        </template>
        <template v-else-if="cmsForm.type === '5'">
          <el-form-item label="跳转样式">
            <el-select v-model="cmsForm.redirectStyle" placeholder="请选择">
              <el-option
                v-for="item in redirectStyle"
                :key="item.key"
                :label="item.label"
                :value="item.key">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="字体大小">
            <el-select
              v-model="cmsForm.fontSize"
              class="filter-item"
              placeholder="选择字体大小"
            >
              <el-option
                v-for="item in fontSize"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="字体颜色">
            <el-color-picker
              v-model="cmsForm.fontColor"
              show-alpha
              :predefine="predefineColors">
            </el-color-picker>
          </el-form-item>
          <el-form-item label="加粗效果">
            <el-select
              v-model="cmsForm.fontWeight"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontWeight"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="斜体">
            <el-select
              v-model="cmsForm.fontStyle"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontStyle"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="按钮名称">
            <el-input v-model="cmsForm.headline" />
          </el-form-item>
          <el-form-item label="跳转类型">
            <el-select v-model="cmsForm.redirectType" placeholder="请选择">
              <el-option
                v-for="item in redirectType"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="分类" v-if="cmsForm.redirectType === 'category'">
            <el-cascader
            v-model="cmsForm.categoryId"
            :options="categoryOptions"
            :props="{ expandTrigger: 'hover',checkStrictly: true }" @change="onCategoryChange" ref="myCascader"></el-cascader>
          </el-form-item>
          <el-form-item label="产品编号" v-if="cmsForm.redirectType === 'product'">
            <el-input v-model="cmsForm.sku" @blur="onSkuChange()" />
          </el-form-item>
          <el-form-item label="文章链接" v-if="cmsForm.redirectType === 'article'">
            <el-input v-model="cmsForm.articleUrl" />
          </el-form-item>
        </template>
        <template v-else-if="cmsForm.type === '6'">
          <el-form-item label="背景颜色">
              <el-color-picker
                v-model="cmsForm.backgroundColor"
                show-alpha
                :predefine="predefineColors">
              </el-color-picker>
          </el-form-item>
        </template>
        <template v-else-if="cmsForm.type === '7'">
          <el-form-item label="模式">
            <el-select v-model="cmsForm.carouselType" placeholder="请选择">
              <el-option
                v-for="item in carouselTypes"
                :key="item.key"
                :label="item.label"
                :value="item.key">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="数量">
            <el-input v-model="cmsForm.carouselNum" />
          </el-form-item>
          <el-form-item label="间隔时间">
            <el-input v-model="cmsForm.carouselInterval" />
          </el-form-item>
          <el-form-item label="自动播放">
            <el-switch
              v-model="cmsForm.carouselAuto"
              active-text="开启"
              active-value="true"
              inactive-value="false"
              inactive-text="关闭">
            </el-switch>
          </el-form-item>
          <el-form-item label="方向">
            <el-switch
              v-model="cmsForm.carouselDirection"
              active-text="横向"
              inactive-text="竖向"
              active-value="horizontal"
              inactive-value="vertical"
              >
            </el-switch>
          </el-form-item>
        </template>
        <template v-else>
          <el-form-item label="文本">
            <el-input v-model="cmsForm.headline" />
          </el-form-item>
        </template>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button type="primary" @click=" createData(cmsForm.index) ">确定</el-button>
      </div>
    </el-dialog>
  </div>
  <div class="tab-container">
    <el-dialog :visible.sync="dialogBannerFormVisible" @close="closeBannerDialog">
      <el-form
          :model="bannerForm"
          ref="bannerForm"
          label-position="left"
          label-width="90px"
          style="width: 400px; margin-left:50px;"
        >
          <el-form-item label="标题">
            <el-input v-model="bannerForm.headline" />
          </el-form-item>
          <el-form-item label="副标题">
            <el-input v-model="bannerForm.subHeadline" />
          </el-form-item>
          <el-form-item label="图片">
            <el-upload
              action="<?= $block->getImageUploadUrl() ?>"
              :data="{'form_key':'<?php echo $block->getFormKey() ?>'}"
              list-type="picture-card"
              :auto-upload="true"
              :on-preview="handlePictureCardPreview"
              :on-success="uploadBannerSuccess" 
              :on-remove="removeSuccess"
              :file-list="fileBannerList"
              :before-upload="beforeUpload"   
              :class="{ hideUpload: !showUpload }"
              :limit="1" >
              <i class="el-icon-plus"></i>
            </el-upload>
            <el-dialog :visible.sync="dialogVisible">
              <img width="100%" :src="{dialogImageUrl}" alt="">
            </el-dialog>
          </el-form-item>
          <el-form-item label="文本位置">
            <el-select
              v-model="bannerForm.fontPosition"
              class="filter-item"
              placeholder="选择文本位置"
            >
              <el-option
                v-for="item in fontPosition"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="字体大小">
            <el-select
              v-model="bannerForm.fontSize"
              class="filter-item"
              placeholder="选择字体大小"
            >
              <el-option
                v-for="item in fontSize"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="字体颜色">
            <el-color-picker
              v-model="bannerForm.fontColor"
              show-alpha
              :predefine="predefineColors">
            </el-color-picker>
          </el-form-item>
          <el-form-item label="加粗效果">
            <el-select
              v-model="cmsForm.fontWeight"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontWeight"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="斜体">
            <el-select
              v-model="cmsForm.fontStyle"
              class="filter-item"
              placeholder="选择加粗效果"
            >
              <el-option
                v-for="item in fontStyle"
                :key="item.key"
                :label="item.label"
                :value="item.key"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="分类">
            <el-cascader
            v-model="bannerForm.categoryId"
            :options="categoryOptions"
            :props="{ expandTrigger: 'hover',checkStrictly: true }" @change="onBannerCategoryChange" ref="myBannerCascader"></el-cascader>
          </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogBannerFormVisible = false">取消</el-button>
        <el-button type="primary" @click=" createBannerData(bannerForm.index,bannerForm.key) ">确定</el-button>
      </div>
    </el-dialog>
  </div>
</div>
<script>
new Vue({
  el: '#app',
  data: function() {
    return {
        elements:<?= json_encode($block->renderElements()) ?>,
        width:<?= $block->getBlockWidth()?>,
        height:<?= $block->getBlockHeight()?>,
        visible: false,
        isCollapse: true,
        listWidth: 200,
        listHeight: 200,
        menus:<?= json_encode($block->renderMenus()) ?>,
        activeModel:<?= json_encode($block->getAllActiveModel()) ?>,
        input: "",
        cmsForm: {
          width: "",
          height: "",
          videoId:"",
        },
        bannerForm:{

        },
        fileList: [],
        fileBannerList:[],
        trackers: ['天', '时','分','秒'],
        dialogFormVisible: false,
        dialogBannerFormVisible: false,
        dialogVisible: false,
        showUpload: true,
        fontPosition: [
          { label: "居中", key: "center" },
          { label: "居左", key: "left" },
          { label: "居右", key: "right" },
        ],
        fontWeight: [
          { label: "强加粗", key: "700" },
          { label: "加粗", key: "500" },
          { label: "正常", key: "300" },
        ],
        fontStyle: [
          { label: "正常", key: "normal" },
          { label: "斜体", key: "italic" },
          { label: "段落斜体", key: "oblique" },
        ],
        redirectStyle: [
          { label: "文字链接", key: "text" },
          { label: "按钮跳转", key: "button" },
        ],
        carouselTypes: [
          { label: "卡片模式", key: "card" },
          { label: "默认", key: "" },
        ],
        fontSize: <?= json_encode($block->getFontSize()) ?>,
        predefineColors: [
          '#ff4500',
          '#ff8c00',
          '#ffd700',
          '#FFFFFF',
          '#00ced1',
          '#1e90ff',
          '#c71585',
          '#FF0000'
        ],
        redirectType:[
          {
            value: 'category',
            label: '分类'
          }, {
            value: 'product',
            label: '产品'
          }, {
            value: 'memberCenter',
            label: '个人中心'
          }, {
            value: 'login',
            label: '登录'
          }, {
            value: 'register',
            label: '注册'
          }, {
            value: 'article',
            label: '文章'
          }
        ],
        categoryOptions:<?= json_encode($block->getCategoryTree()) ?>,
        videoDataUrl: '',
        videoData: '',
        uploader: '',
        videoDataForm: {
            userId: '1663953434320670',
            region: 'cn-shanghai',
            partSize: 104856,//分片大小
            parallel: 5,//并行上传片数
            retryCount: 3,//网络失败后重新上传次数
            retryDuration: 2, //网络失败后重新上传时间
        },
        videoId: '',
        videoFlag:false,
        videoUploadPercent: 0,
        loading:false,
        imageBannerUrl:'',
        imageUrl:'',
        dialogImageUrl:'',
        dialogBannerImageUrl:'',
    }
  },
  mounted() {
      let listEl = document.getElementById('list');
      this.listWidth = listEl.clientWidth;
      this.listHeight = listEl.clientHeight;
      window.addEventListener('resize', ()=>{
          this.listWidth = listEl.clientWidth;
          this.listHeight = listEl.clientHeight;
      })
  },

  computed: {
      rects() {
          //return this.$store.state.rect.rects
      },
  },

  methods: {
    setClass (item) {
      let obj = {};
      obj[item] = true;
      return obj;
    },
    createUplader(_this) {
				let uploader = new AliyunUpload.Vod({
					userId: _this.videoDataForm.userId,
					partSize: _this.videoDataForm.partSize,
					parallel: _this.videoDataForm.parallel,
					retryCount: _this.videoDataForm.retryCount,
					retryDuration: _this.videoDataForm.retryDuration,
					//是否上报上传日志到点播，默认为true
					enableUploadProgress: true,
					// 开始上传
					'onUploadstarted': function(uploadInfo) {
						var url = '<?php echo $this->getUrl('cmstool/common/video');?>';
            var formdata = new FormData();
            if (!uploadInfo.videoId) { 
              var timestamp=new Date().getTime();
              var Title = timestamp +''+uploadInfo.file.name;
              formdata.append('form_key','<?php echo $block->getFormKey() ?>');
              formdata.append('filename',Title);
              formdata.append('title',Title);
              formdata.append('template_type','1');
              formdata.append('action','CreateUploadVideo');
              axios.post(url, formdata)
              .then(function (response) {
                console.log(response)
                if (response.data.code !== 200) {
									return _this.$message.error("上传视频失败")
								}
								let uploadAuth = response.data.data.UploadAuth
								let uploadAddress = response.data.data.UploadAddress
								let videoId = response.data.data.VideoId
								_this.fileName = response.data.data.FileName
								uploader.setUploadAuthAndAddress(uploadInfo, uploadAuth, uploadAddress,
									videoId)
								_this.$message.success("上传中..")
                _this.videoFlag = true;
                _this.videoUploadPercent = 0;
              })
              .catch(function (error) {
                  console.log(error);
                  message = {
                    type: "error",
                    message: "获取上传凭证失败",
                  };
              });
            } else {
              formdata.append('form_key','<?php echo $block->getFormKey() ?>');
              formdata.append('video_id',uploadInfo.videoId);
              formdata.append('action','RefreshUploadVideo');
              axios.post(url, formdata)
              .then(function (response) {
                  if(response.data.data.UploadAuth)
                  {
                      console.log(response.data.data.UploadAuth)
                      var uploadAuth = response.data.data.UploadAuth
                      var uploadAddress = response.data.data.UploadAddress
                      var videoId = response.data.data.VideoId
                      uploader.setUploadAuthAndAddress(uploadInfo, uploadAuth, uploadAddress,videoId)
                      _this.$message.success("上传中..")
                  }else{
                    _this.$message.success("获取上传凭证成功")
                  }
              })
              .catch(function (error) {
                  console.log(error);
                  message = {
                    type: "error",
                    message: "获取上传凭证失败",
                  };
              }); 
            }
					},
					// 文件上传成功
					'onUploadSucceed': function(uploadInfo) {
            var url = '<?php echo $this->getUrl('cmstool/common/video');?>';
            var formdata = new FormData();
            if (uploadInfo.videoId) { 
              formdata.append('form_key','<?php echo $block->getFormKey() ?>');
              formdata.append('video_id',uploadInfo.videoId);
              formdata.append('action','GetPlayInfo');
              axios.post(url, formdata)
              .then(function (response) {
                console.log(response)
                if (response.data.code == 200) {
                  _this.cmsForm.videoId = uploadInfo.videoId;
                  _this.cmsForm.videoUrl = response.data.url;
                  _this.cmsForm.videoCoverUrl = response.data.videoCoverUrl;
								}
              })
              .catch(function (error) {
                  console.log(error);
                  message = {
                    type: "error",
                    message: "获取视频信息失败",
                  };
              });
            } 
					},
					// 文件上传失败
					'onUploadFailed': function(uploadInfo, code, message) {
						console.log(uploadInfo)
					},
					// 文件上传进度，单位：字节
					'onUploadProgress': function(uploadInfo, totalSize, loadedPercent) {
            console.log("onUploadProgress:file:" + uploadInfo.file.name + ", fileSize:" + totalSize + ", percent:" + Math.ceil(loadedPercent * 100) + "%")
                // var progressPercent = Math.ceil(loadedPercent * 100) + "%"
                // $('#auth-progress_mb').text(progressPercent)
                // $('#status_mb').text('文件上传中...')
            console.log(Math.ceil(loadedPercent * 100));
            _this.videoFlag = true;
            _this.videoUploadPercent = parseInt(loadedPercent * 100);
					},
					// 上传凭证超时
					'onUploadTokenExpired': function(uploadInfo) {
						console.log("onUploadTokenExpired");
						//实现时，根据uploadInfo.videoId调用刷新视频上传凭证接口重新获取UploadAuth
						//从点播服务刷新的uploadAuth,设置到SDK里   
						_this.$message.success('上传文件超时，正在重新上传')
						uploader.resumeUploadWithAuth(uploadAuth);
					},
					//全部文件上传结束
					'onUploadEnd': function(uploadInfo) {
						console.log("onUploadEnd: uploaded all the files");
            _this.videoFlag = false;
            _this.videoUploadPercent = 0;
						_this.$message.success('全部文件上传完毕')
					}
				});
				return uploader;
			},
      timeElapsedHandler: function () {
        // console.warn('Count Down Elapsed!!!')
      },
      activateEv(index) {
          //this.$store.dispatch('rect/setActive', {id: index});
      },

      deactivateEv(index) {
          //this.$store.dispatch('rect/unsetActive', {id: index});
      },

      changePosition(newRect, index) {
            this.elements[index].top = newRect.top;
            this.elements[index].left = newRect.left;
            this.elements[index].width = newRect.width;
            this.elements[index].height = newRect.height;
            Vue.set(this.elements, index, this.elements[index]);
      },

      changeSize(newRect, index) {
            this.elements[index].top = newRect.top;
            this.elements[index].left = newRect.left;
            this.elements[index].width = newRect.width;
            this.elements[index].height = newRect.height;
            Vue.set(this.elements, index, this.elements[index]);
      },
      handleOpen(key, keyPath) {
        //console.log(key, keyPath);
      },
      handleClose(key, keyPath) {
        //console.log(key, keyPath);
      },
      removeElement(index){
        this.elements.splice(index, 1);
        //elements.splice(elements.indexOf(element), 1);
      },
      removeCarousel(index,key){
        this.elements[index].carouselItem.splice(key, 1);
        //elements.splice(elements.indexOf(element), 1);
      },
      addCarousel(index,key){
        this.elements[index].carouselItem.splice(key,0,{});
        //elements.splice(elements.indexOf(element), 1);
      },
      addElement(type,ctype) {
        type = type.toString();
        ctype = ctype.toString();
        switch(type){
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
              console.log(type);
              this.cmsForm = {
                type:type,
              };
              this.dialogImageUrl = null;
              this.dialogFormVisible = true;
              break
            case '0':
              this.loading = true;
              this.width = this.activeModel[ctype].width;
              this.height = this.activeModel[ctype].height;   
              this.elements.length = 0;
              setTimeout(() => {
                JSON.parse(JSON.stringify(this.activeModel[ctype].type_json)).forEach(item => {
                  this.elements.push(item);
                  this.loading = false;
                }) 
              }, 2000);
              this.dialogFormVisible = false;
              break
            default:
                //这里是没有找到对应的值处理
              this.dialogFormVisible = false;
              break
        }
      },
      editElement(index) {
        switch(this.elements[index].type){
            case '1':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                imageUrl: this.elements[index].imageUrl,
              };
              this.fileList = [{
                name: "123.jpg",
                url: this.elements[index].imageUrl
              }],
              this.dialogImageUrl = this.elements[index].imageUrl;
              break
            case '2':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                videoId: this.elements[index].videoId,
                videoUrl: this.elements[index].videoUrl,
                videoCoverUrl: this.elements[index].videoCoverUrl,
              };
                break
            case '3':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                headline:this.elements[index].headline,
                fontPosition:this.elements[index].fontPosition,
                fontWeight:this.elements[index].fontWeight,
                fontStyle:this.elements[index].fontStyle,
                fontSize:this.elements[index].fontSize,
                fontColor:this.elements[index].fontColor,
              };
              break
            case '4':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                deadline:this.elements[index].deadline,
              };
              break
            case '5':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                headline:this.elements[index].headline,
                redirectType:this.elements[index].redirectType,
                redirectStyle:this.elements[index].redirectStyle,
                fontWeight:this.elements[index].fontWeight,
                fontStyle:this.elements[index].fontStyle,
                fontSize:this.elements[index].fontSize,
                fontColor:this.elements[index].fontColor,
              };
              switch(this.elements[index].redirectType)
              {
                case 'category':
                  this.cmsForm.categoryId = this.elements[index].categoryId;
                  this.cmsForm.name = this.elements[index].name;
                  break;
                case 'product':
                  this.cmsForm.sku = this.elements[index].sku;
                  this.cmsForm.name = this.elements[index].name;
                  this.cmsForm.price = this.elements[index].price;
                  break;
                case 'article':
                  this.cmsForm.articleUrl = this.elements[index].articleUrl;
                  break;
              }
              break
            case '6':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                backgroundColor:this.elements[index].backgroundColor,
              };
              break
            case '7':
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                carouselType:this.elements[index].carouselType,
                carouselNum:this.elements[index].carouselNum,
                carouselDirection:this.elements[index].carouselDirection,
                carouselAuto:this.elements[index].carouselAuto,
                carouselItem:this.elements[index].carouselItem,
                carouselInterval:this.elements[index].carouselInterval,
              };
              break 
            default:
              this.cmsForm = {
                index:index,
                type:this.elements[index].type,
                width: this.elements[index].width,
                height: this.elements[index].height,
                headline:this.elements[index].headline,
                fontPosition:this.elements[index].fontPosition,
                fontWeight:this.elements[index].fontWeight,
                fontStyle:this.elements[index].fontStyle,
                fontSize:this.elements[index].fontSize,
                fontColor:this.elements[index].fontColor,
              };
              break
        }
        this.dialogFormVisible = true;
      },
      editCarousel(index,key) {
        this.fileBannerList = [{
          name: "123.jpg",
          url: this.elements[index].carouselItem[key].imageBannerUrl,
        }],
        this.bannerForm = {
          index:index,
          key:key,
          imageBannerUrl: this.elements[index].carouselItem[key].imageBannerUrl,
          headline:this.elements[index].carouselItem[key].headline,
          subHeadline:this.elements[index].carouselItem[key].subHeadline,
          fontPosition:this.elements[index].carouselItem[key].fontPosition,
          fontWeight:this.elements[index].carouselItem[key].fontWeight,
          fontStyle:this.elements[index].carouselItem[key].fontStyle,
          fontSize:this.elements[index].carouselItem[key].fontSize,
          fontColor:this.elements[index].carouselItem[key].fontColor,
          categoryId:this.elements[index].carouselItem[key].categoryId,
          name:this.elements[index].carouselItem[key].name,
        };
        this.dialogBannerFormVisible = true;
      },
      //添加增加题目
      createData(index) {
        const params = this.cmsForm;
        params.width = parseInt(params.width); 
        params.height = parseInt(params.height);
        params.type = params.type.toString();
        if(typeof(index) === 'undefined'||index === null)
        {
          console.log(params.type);
          switch(params.type){
              case '1':
                console.log(this.elements);
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    imageUrl:this.imageUrl,
                    type:params.type,
                    zIndex:1,
                });
                break;
              case '2':
                console.log(params.videoId);
                console.log(params.videoUrl);
                console.log(params.videoCoverUrl);
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    videoId:params.videoId,
                    videoUrl:params.videoUrl,
                    videoCoverUrl:params.videoCoverUrl,
                    type:params.type,
                    zIndex:1,
                });
                break;
              case '3':
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    headline:params.headline,
                    type:params.type,
                    zIndex:1,
                    fontPosition:params.fontPosition,
                    fontWeight:params.fontWeight,
                    fontStyle:params.fontStyle,
                    fontSize:params.fontSize,
                    fontColor:params.fontColor,
                });
                break;
              case '4':
                console.log(params.deadline)
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    type:params.type,
                    zIndex:1,
                    deadline:params.deadline,
                });
                break;
              case '5':
                var redirctData = {
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    type:params.type,
                    zIndex:1,
                    redirectType:params.redirectType,
                    headline:params.headline,
                    redirectStyle:params.redirectStyle,
                    fontWeight:params.fontWeight,
                    fontStyle:params.fontStyle,
                    fontSize:params.fontSize,
                    fontColor:params.fontColor,
                };
                switch(params.redirectType)
                {
                  case 'category':
                    redirctData.categoryId = params.categoryId;
                    redirctData.name = params.name;
                    break;
                  case 'product':
                    console.log(params.name);
                    redirctData.sku = params.sku;
                    redirctData.name = params.name;
                    redirctData.price = params.price;
                    break;
                  case 'article':
                    redirctData.articleUrl = params.articleUrl;
                    break;
                }
                this.elements.push(redirctData);
                break;
              case '6':
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    type:params.type,
                    zIndex:1,
                    backgroundColor:params.backgroundColor,
                });
                break;
              case '6':
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    type:params.type,
                    zIndex:1,
                    backgroundColor:params.backgroundColor,
                });
                break;
              case '7':
                var carouselItems = [];
                for (let index = 0; index <params.carouselNum; index++) {
                   carouselItems.push({key:index});
                }
                this.elements.push({
                    width: params.width,
                    height: params.height,
                    left: 10,
                    top: 10,
                    isActive: true,
                    type:params.type,
                    zIndex:1,
                    carouselType:params.carouselType,
                    carouselNum:params.carouselNum,
                    carouselDirection:params.carouselDirection,
                    carouselAuto:params.carouselAuto,
                    carouselItem:carouselItems,
                    carouselInterval:params.carouselInterval
                });
                break;
              default:
                break;
          }
        }else{
          switch(params.type){
              case '1':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].imageUrl = this.imageUrl;
                break;
              case '2':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].videoId = params.videoId;
                this.elements[index].videoUrl = params.videoUrl;
                this.elements[index].videoCoverUrl = this.videoCoverUrl;
                break;
              case '3':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].headline = params.headline;
                this.elements[index].fontPosition = params.fontPosition;
                this.elements[index].fontWeight = params.fontWeight;
                this.elements[index].fontStyle = params.fontStyle;
                this.elements[index].fontSize = params.fontSize;
                this.elements[index].fontColor = params.fontColor;
                break;
              case '4':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].deadline = params.deadline;
                break;
              case '5':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].headline = params.headline;
                this.elements[index].redirectType = params.redirectType;
                this.elements[index].redirectStyle = params.redirectStyle;
                this.elements[index].fontWeight = params.fontWeight;
                this.elements[index].fontStyle = params.fontStyle;
                this.elements[index].fontSize = params.fontSize;
                this.elements[index].fontColor = params.fontColor;
                switch(params.redirectType)
                {
                  case 'category':
                    this.elements[index].categoryId = params.categoryId;
                    this.elements[index].name = params.name;
                    break;
                  case 'product':
                    console.log(params.name);
                    this.elements[index].sku = params.sku;
                    this.elements[index].name = params.name;
                    this.elements[index].price = params.price;
                    break;
                  case 'article':
                    this.elements[index].articleUrl = params.articleUrl;
                    break;
                }
                break;
              case '6':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].backgroundColor = params.backgroundColor;
                break;
              case '7':
                this.elements[index].width = params.width;
                this.elements[index].height = params.height;
                this.elements[index].carouselType = params.carouselType;
                this.elements[index].carouselNum = params.carouselNum;
                this.elements[index].carouselDirection = params.carouselDirection;
                this.elements[index].carouselAuto = params.carouselAuto;
                this.elements[index].carouselItem = params.carouselItem;
                this.elements[index].carouselInterval = params.carouselInterval;
                break;
              default:
                break;
          }
          Vue.set(this.elements, index, this.elements[index]);
        }
        this.dialogFormVisible = false;
      },
      //添加增加题目
      createBannerData(index,key) {
        const params = this.bannerForm;
        this.elements[index].carouselItem[key].imageBannerUrl = this.imageBannerUrl?this.imageBannerUrl:params.imageBannerUrl;
        this.elements[index].carouselItem[key].headline = params.headline;
        this.elements[index].carouselItem[key].subHeadline = params.subHeadline;
        this.elements[index].carouselItem[key].fontPosition = params.fontPosition;
        this.elements[index].carouselItem[key].fontWeight = params.fontWeight;
        this.elements[index].carouselItem[key].fontStyle = params.fontStyle;
        this.elements[index].carouselItem[key].fontColor = params.fontColor;
        this.elements[index].carouselItem[key].fontSize = params.fontSize;
        this.elements[index].carouselItem[key].categoryId = params.categoryId;
        this.elements[index].carouselItem[key].name = params.name;
        Vue.set(this.elements, index, this.elements[index]);
        this.dialogBannerFormVisible = false;
      },
      toggleUpload() {
        this.showUpload = !this.showUpload
      },
      uploadSuccess(response, file, fileList) {
         this.imageUrl = response;
      },
      uploadBannerSuccess(response, file, fileList) {
         this.imageBannerUrl = response;
      },
      beforeUpload(file) {
          // 这里我也准备只接受jpg的格式储存所以我就直接用了官方提供的代码
          const isJPG = file.type === 'image/jpeg'||'image/png'||'image/jpg';
          const isLt10M = file.size / 1024 / 1024 < 10;
          
          if (!isJPG) {
              this.$message.error('上传图片只能是 JPG 格式!');
          }
          if (!isLt10M) {
              this.$message.error('上传图片大小不能超过 10MB!');
          }
          return isJPG && isLt10M;
      },
      handleRemove(file, fileList) {
        console.log(file, fileList);
      },
      handlePictureCardPreview(file) {
        this.dialogImageUrl = file.url;
        this.dialogVisible = true;
      },
      toBottom(index){
        console.log(this.elements[index].zIndex);
        if(parseInt(this.elements[index].zIndex)<1){
          this.$message.error('已到最底层!');
        }else{
          this.elements[index].zIndex = parseInt(this.elements[index].zIndex)-1;
          Vue.set(this.elements, index, this.elements[index]);
        }
      },
      toCopy(index){
          var elementJson = JSON.parse(JSON.stringify(this.elements[index]));
          this.elements.push(elementJson);
      },
      toTop(index){
        this.elements[index].zIndex = parseInt(this.elements[index].zIndex)+1;
        Vue.set(this.elements, index, this.elements[index]);
      },
      closeDialog(){

      },
      closeBannerDialog(){

      },
      removeSuccess(){
        
      },
      async onSkuChange() {
          let formdata = new FormData();
          let index = this.cmsForm.index;
          let name = '';
          let price = '';
          formdata.append('form_key','<?php echo $block->getFormKey() ?>');
          formdata.append('sku',this.cmsForm.sku);
          console.log(this.cmsForm.sku);
          let res = await axios.post('<?= $block->getSkuUrl()?>', formdata)
          .then(function (response) {
              if(response.data.code==200)
              { 
                name = response.data.data.name;
                price = response.data.data.price;
                message = {
                  type: "success",
                  message: "该sku存在",
                };
              }else{
                message = {
                  type: "error",
                  message: "产品sku输入错误或者该sku不存在",
                };
              }
              
          })
          .catch(function (error) {
              console.log(error);
              message = {
                type: "error",
                message: "产品sku输入错误或者该sku不存在",
              };
          });
          if(message.type=='success')
          {
              this.cmsForm.name = name;
              this.cmsForm.price = price;
          }
          this.$message(message);
      },
      onCategoryChange(value){
        if(value)
        {
          if(value[3])
          {
              this.cmsForm.category = value[3];
              const Nodes = this.$refs.myCascader.getCheckedNodes()[0];
              this.cmsForm.name = Nodes.parent.parent.parent.label;
          }else if(value[2])
          {
              this.cmsForm.category = value[2];
              const Nodes = this.$refs.myCascader.getCheckedNodes()[0];
              this.cmsForm.name = Nodes.parent.parent.label;
          }else if(value[1])
          {
              this.cmsForm.category = value[1];
              const Nodes = this.$refs.myCascader.getCheckedNodes()[0];
              this.cmsForm.name = Nodes.parent.label;
          }else if(value[0])
          {
              this.cmsForm.category = value[0];
              const Nodes = this.$refs.myCascader.getCheckedNodes()[0];
              this.cmsForm.name = Nodes.label;
          }
        }
      },
      onBannerCategoryChange(value){
        if(value)
        {
          if(value[3])
          {
              this.bannerForm.category = value[3];
              const Nodes = this.$refs.myBannerCascader.getCheckedNodes()[0];
              this.bannerForm.name = Nodes.parent.parent.parent.label;
          }else if(value[2])
          {
              this.bannerForm.category = value[2];
              const Nodes = this.$refs.myBannerCascader.getCheckedNodes()[0];
              this.bannerForm.name = Nodes.parent.parent.label;
          }else if(value[1])
          {
              this.bannerForm.category = value[1];
              const Nodes = this.$refs.myBannerCascader.getCheckedNodes()[0];
              this.bannerForm.name = Nodes.parent.label;
          }else if(value[0])
          {
              this.bannerForm.category = value[0];
              const Nodes = this.$refs.myBannerCascader.getCheckedNodes()[0];
              this.bannerForm.name = Nodes.label;
          }
        }
      },
      async saveElement(){
        var elementsArr = Object.keys(this.elements).map(key => {
            //console.log(key); //为每个键名
          var data = {};
          data.zIndex = this.elements[key].zIndex;
          data.width = this.elements[key].width;
          data.height = this.elements[key].height;
          data.left = this.elements[key].left;
          data.top = this.elements[key].top;
          data.isActive = this.elements[key].isActive;
          data.type = this.elements[key].type;
          switch (this.elements[key].type) {
            case '1':
              data.imageUrl = this.elements[key].imageUrl;
              break;
            case '2':
              data.videoUrl = this.elements[key].videoUrl;
              data.videoId = this.elements[key].videoId;
              data.videoCoverUrl = this.elements[key].videoCoverUrl;
              break;
            case '3':
              data.headline = this.elements[key].headline;
              data.fontPosition = this.elements[key].fontPosition;
              data.fontSize = this.elements[key].fontSize;
              data.fontStyle = this.elements[key].fontStyle;
              data.fontWeight = this.elements[key].fontWeight;
              data.fontColor = this.elements[key].fontColor;
              break;
            case '4':
              data.deadline = this.elements[key].deadline;
              break;
            case '5':
              data.headline = this.elements[key].headline;
              data.redirectStyle = this.elements[key].redirectStyle;
              data.redirectType = this.elements[key].redirectType;
              data.fontSize = this.elements[key].fontSize;
              data.fontStyle = this.elements[key].fontStyle;
              data.fontWeight = this.elements[key].fontWeight;
              data.fontColor = this.elements[key].fontColor;
              switch(data.redirectType)
              {
                case 'category':
                  data.categoryId = this.elements[key].categoryId;
                  data.category = this.elements[key].category;
                  data.name = this.elements[key].name;
                  break;
                case 'product':
                  data.sku = this.elements[key].sku;
                  data.name = this.elements[key].name;
                  data.price = this.elements[key].price;
                  break;
                case 'article':
                  data.articleUrl = this.elements[key].articleUrl;
                  break;
              }
              break;
            case '6':
              data.backgroundColor = this.elements[key].backgroundColor;
              break;
            case '7':
              data.carouselType = this.elements[key].carouselType;
              data.carouselNum = this.elements[key].carouselNum;
              data.carouselDirection = this.elements[key].carouselDirection;
              data.carouselAuto = this.elements[key].carouselAuto;
              data.carouselItem = this.elements[key].carouselItem;
              data.carouselInterval = this.elements[key].carouselInterval;
              break;
            default:
              break;
          }
          return data;
        });
        let formdata = new FormData();
        formdata.append('data',JSON.stringify(elementsArr));
        formdata.append('form_key','<?php echo $block->getFormKey() ?>');
        formdata.append('block_id','<?php echo $block->getBlockTypeId() ?>');
        console.log(elementsArr);
        let message = {};
        let res = await axios.post('<?= $block->getSaveUrl()?>', formdata)
        .then(function (response) {
            console.log(response);
            message = {
              type: "success",
              message: "保存成功",
            };
        })
        .catch(function (error) {
            console.log(error);
            message = {
              type: "error",
              message: "保存失败",
            };
        });
        console.log(message);
        this.$message(message);
      },
      uploadVideoChange(file, fileList) {
				console.log(file)
				let _this = this
				let fileReader = new FileReader()
				fileReader.readAsDataURL(file.raw)
				fileReader.onload = function(e) {
					_this.videoUrl = e.currentTarget.result
				}
				this.videoData = file
				console.log(file.size / 1024 / 1024)
				var userData = '{"Vod":{}}'
				if (this.uploader) {
          console.log(this.uploader)
					this.uploader.stopUpload()
				}
				this.uploader = this.createUplader(this)
        console.log(file.raw)
				this.uploader.addFile(file.raw, null, null, null, userData)
				this.uploader.startUpload()
			},
			// 视频文件上传前的钩子
			uploadVideoBefore(file) {
					//视频上传大小
				const isLt1024M = file.size / 1024 / 1024 < 1024;
				if (['video/mp4','video/mp3', 'video/ogg', 'video/flv', 'video/avi', 'video/wmv', 'video/rmvb'].indexOf(file.type) == -
					1) {
					this.$message.error('请上传正确的视频格式');
					return false;
				}
				if (!isLt1024M ) {
					this.$message.error('上传视频大小不能超过1GB哦!');
					return false;
				}
			},
      toBottom(index){
            console.log(this.elements[index].zIndex);
            if(parseInt(this.elements[index].zIndex)<1){
                this.$message.error('已到最底层!');
            }else{
                this.elements[index].zIndex = parseInt(this.elements[index].zIndex)-1;
                Vue.set(this.elements, index, this.elements[index]);
            }
      },
      toCopy(index){
          var elementJson = JSON.parse(JSON.stringify(this.elements[index]));
          this.elements.push(elementJson);
      },
      toTop(index){
          this.elements[index].zIndex = parseInt(this.elements[index].zIndex)+1;
          Vue.set(this.elements, index, this.elements[index]);
      },
      editElement(index) {
          switch(this.elements[index].type){
              case '1':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  imageUrl: this.elements[index].imageUrl,
                };
                this.fileList = [{
                  name: "123.jpg",
                  url: this.elements[index].imageUrl
                }],
                this.dialogImageUrl = this.elements[index].imageUrl;
                break
              case '2':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  videoId: this.elements[index].videoId,
                  videoUrl: this.elements[index].videoUrl,
                  videoCoverUrl: this.elements[index].videoCoverUrl,
                };
                  break
              case '3':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  headline:this.elements[index].headline,
                  fontPosition:this.elements[index].fontPosition,
                  fontWeight:this.elements[index].fontWeight,
                  fontStyle:this.elements[index].fontStyle,
                  fontSize:this.elements[index].fontSize,
                  fontColor:this.elements[index].fontColor,
                };
                break
              case '4':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  deadline:this.elements[index].deadline,
                };
                break
              case '5':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  headline:this.elements[index].headline,
                  redirectType:this.elements[index].redirectType,
                  redirectStyle:this.elements[index].redirectStyle,
                  fontWeight:this.elements[index].fontWeight,
                  fontStyle:this.elements[index].fontStyle,
                  fontSize:this.elements[index].fontSize,
                  fontColor:this.elements[index].fontColor,
                };
                switch(this.elements[index].redirectType)
                {
                  case 'category':
                    this.cmsForm.categoryId = this.elements[index].categoryId;
                    this.cmsForm.name = this.elements[index].name;
                    break;
                  case 'product':
                    this.cmsForm.sku = this.elements[index].sku;
                    this.cmsForm.name = this.elements[index].name;
                    this.cmsForm.price = this.elements[index].price;
                    break;
                  case 'article':
                    this.cmsForm.articleUrl = this.elements[index].articleUrl;
                    break;
                }
                break
              case '6':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  backgroundColor:this.elements[index].backgroundColor,
                };
                break
              case '7':
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  carouselType:this.elements[index].carouselType,
                  carouselNum:this.elements[index].carouselNum,
                  carouselDirection:this.elements[index].carouselDirection,
                  carouselAuto:this.elements[index].carouselAuto,
                  carouselItem:this.elements[index].carouselItem,
                  carouselInterval:this.elements[index].carouselInterval,
                };
                break 
              default:
                this.cmsForm = {
                  index:index,
                  type:this.elements[index].type,
                  width: this.elements[index].width,
                  height: this.elements[index].height,
                  headline:this.elements[index].headline,
                  fontPosition:this.elements[index].fontPosition,
                  fontWeight:this.elements[index].fontWeight,
                  fontStyle:this.elements[index].fontStyle,
                  fontSize:this.elements[index].fontSize,
                  fontColor:this.elements[index].fontColor,
                };
                break
          }
          this.dialogFormVisible = true;
      },
      removeElement(index){
          this.elements.splice(index, 1);
          //elements.splice(elements.indexOf(element), 1);
      },
    }
})
</script>